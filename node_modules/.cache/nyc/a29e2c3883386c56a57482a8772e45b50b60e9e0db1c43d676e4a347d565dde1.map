{"version":3,"sources":["officeController.js"],"names":["PoliticalOffice","req","res","body","type","name","location","contact","schema","joi","object","keys","string","min","required","max","regex","length","validationError","validate","abortEarly","error","errors","index","details","push","message","status","send","statusCode","data","id","parseInt","officeData","created_at","Date","record","find","item","undefined","params","office","filter"],"mappings":"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","sourceRoot":"/media/ynwa/Volume/Work/Andela/server/controllers","sourcesContent":["import joi from 'joi';\nimport officeData from '../data/officeSampleData';\n\nclass PoliticalOffice {\n  static createPoliticalOffice(req, res) {\n    const {\n      type,\n      name,\n      location,\n      contact,\n    } = req.body;\n\n    const schema = joi.object().keys({\n      type: joi.string().min(3).required(),\n      name: joi.string().min(3).required(),\n      location: joi.string().min(3).max(50).required(),\n      contact: joi.string().regex(/^(07)(\\d{8})/).length(10).required(),\n    });\n\n    const validationError = joi.validate(req.body, schema, {\n      abortEarly: false,\n    });\n\n    if (validationError.error != null) {\n      const errors = [];\n      for (let index = 0; index < validationError.error.details.length; index++) {\n        errors.push(validationError.error.details[index].message);\n      }\n\n      return res.status(400).send({\n        status: res.statusCode,\n        error: errors,\n      });\n    }\n\n    const data = {\n      id: parseInt(officeData.length + 1),\n      type,\n      name,\n      location,\n      contact,\n      created_at: new Date(),\n    };\n\n    const record = officeData.find(item => item.contact === contact);\n    if (record != undefined) {\n      return res.status(400).send({\n        status: res.statusCode,\n        error: 'This office is already registered',\n      });\n    }\n\n\n    officeData.push(data);\n    return res.status(201).send({\n      status: res.statusCode,\n      data: [data],\n    });\n  }\n\n  static getAllPoliticalOffices(req, res) {\n    return res.status(200).send({\n      status: res.statusCode,\n      data: officeData,\n    });\n  }\n\n  static getSpecificPoliticalOffice(req, res) {\n    const { id } = req.params;\n\n    if (!parseInt(id)) {\n      return res.status(400).send({\n        status: res.statusCode,\n        error: 'ID should be an integer',\n      });\n    }\n\n    const office = officeData.filter(item => item.id === parseInt(id));\n\n    if (office === undefined) {\n      return res.status(404).send({\n        status: res.statusCode,\n        error: 'No information found for provided id',\n      });\n    }\n\n    return res.status(200).send({\n      status: res.statusCode,\n      data: office,\n    });\n  }\n}\n\nexport default PoliticalOffice;\n"]}